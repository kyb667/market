// 플러그인의 의존성을 관리
buildscript {
  // 전역으로 사용되는 변수들을 여기에 선언
	ext {
		springBootVersion = '1.4.4.RELEASE'
		tomcatVersion = '8.5.51'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

// 플러그인은 가장 먼저 선언하는 명령으로써 기초적인 플랫폼 사용을 명시 -- 4개는 필수
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


group = 'eunbi.kwon' // Component scan to package
version = '0.0.1-SNAPSHOT' // Application version
sourceCompatibility = '1.8' // Java version

configurations {
  providedRuntime
}

// configurations {
// 	compileOnly {
// 		extendsFrom annotationProcessor
// 	}
// }

//  repositories
// gradle이 필요한 라이브ㅡ러리를 자동으로 다운로드 하기위해 사용하는 저장소
// jcenter or mavenCentral이 주로 사용
// -----------------------------------
// jcenter - jcenter 저장소
// mavenCenral - maven 중앙 저장소
// -----------------------------------
repositories {
	mavenCentral()
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.13'
}

// dependencies
// 라이브러리를 사용하기 위한 문장
// 의존문 종류
//  -1 implementation - 컴파일 시 의존하는 라이브러리를 지정
//  -2 testCompile - 테스트 할 때 사용하는 라이브러리를 지정
//  -3 classpath - 컴파일부터 실행까지 의존하는 라이브러리 지정에 사용
//  -4 compile - 존관계가 있는 모든 모듈을 재빌드

// implementation : A모듈이 변경되었을 경우 재빌드 시 직접적으로 의존하고 있는 B모듈 까지만 재빌드 한다. 지정한 모듈까지만 빌드되어 포함되기 때문에 compile보다 빠름.
// compile : 의존관계가 있는 모든 모듈을 재빌드해야 하고 빌드결과물에 포함하기 때문에 A,B,C의 모든 API를 접근할 수 있음(취약점 때문에 현재 Deprecated)
// compileOnly : 컴파일 시에만 빌드하고 빌드 결과물에는 포함되지 않음(ex. lombok)
// runtimeOnly : 런타임 시에만 필요한 라이브러리인 경우(ex. postgresql)
// annotationProcessor : 어노테이션을 사용하는 라이브러리인경우 명시(ex. lombok)
dependencies {
  compile     "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
  compile     "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
  testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
  compile("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}")
  compile("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}")
  compile("org.apache.tomcat.embed:tomcat-embed-el:${tomcatVersion}")
  compile("org.apache.tomcat.embed:tomcat-embed-websocket:${tomcatVersion}")

  compile     'org.projectlombok:lombok:1.16.12'
  testCompile 'org.projectlombok:lombok:1.16.12'

  compile 'com.fasterxml.jackson.core:jackson-core:2.8.6'
  compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.6'
  compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.8.7'
  compile 'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.2.0'
  compile 'org.postgresql:postgresql:9.4.1212.jre7'
  compile 'com.github.fge:json-schema-validator:2.2.6'
  compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.6'
  compile 'org.mybatis:mybatis-typehandlers-jsr310:1.0.2'

  compile 'org.webjars:webjars-locator:0.32'

  compile 'com.amazonaws:aws-java-sdk-bom:1.11.153'
  compile 'com.amazonaws:aws-java-sdk-core:1.11.153'
  compile 'com.amazonaws:aws-java-sdk-lambda:1.11.153'
  compile 'com.amazonaws:aws-java-sdk-ses:1.11.153'
  compile 'com.amazonaws:aws-java-sdk-sqs:1.11.153'
  compile 'com.amazonaws:aws-java-sdk-dynamodb:1.11.153'
  compile 'com.amazonaws:aws-java-sdk-s3:1.11.153'
  compile 'com.amazonaws:aws-java-sdk-cloudwatch:1.11.153'
  compile 'com.amazonaws:jmespath-java:1.0'

  compile 'com.github.derjust:spring-data-dynamodb:4.3.1'
  compile 'org.apache.commons:commons-lang3:3.5'

  compile 'org.apache.httpcomponents:httpclient:4.5.3'

  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-security'
  compile 'org.bitbucket.b_c:jose4j:0.6.5'

}
// dependencies {
// 	implementation 'org.springframework.boot:spring-boot-starter-web'
// 	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.0'
// 	compileOnly 'org.projectlombok:lombok'
// 	developmentOnly 'org.springframework.boot:spring-boot-devtools'
// 	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
// 	annotationProcessor 'org.projectlombok:lombok'
// 	testImplementation 'org.springframework.boot:spring-boot-starter-test'
// }

// tasks.named('test') {
// 	useJUnitPlatform()
// }
